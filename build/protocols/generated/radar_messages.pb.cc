// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_messages.proto

#include "radar_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace radar {
namespace messages {
PROTOBUF_CONSTEXPR Point3D::Point3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Point3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point3DDefaultTypeInternal _Point3D_default_instance_;
PROTOBUF_CONSTEXPR Vector3D::Vector3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DDefaultTypeInternal() {}
  union {
    Vector3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DDefaultTypeInternal _Vector3D_default_instance_;
PROTOBUF_CONSTEXPR Matrix3D::Matrix3D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix3DDefaultTypeInternal() {}
  union {
    Matrix3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix3DDefaultTypeInternal _Matrix3D_default_instance_;
PROTOBUF_CONSTEXPR Detection_AttributesEntry_DoNotUse::Detection_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Detection_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Detection_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Detection_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Detection_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Detection_AttributesEntry_DoNotUseDefaultTypeInternal _Detection_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Detection::Detection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.position_covariance_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.velocity_covariance_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.snr_)*/0
  , /*decltype(_impl_.amplitude_)*/0
  , /*decltype(_impl_.doppler_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.coord_system_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionDefaultTypeInternal() {}
  union {
    Detection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionDefaultTypeInternal _Detection_default_instance_;
PROTOBUF_CONSTEXPR DetectionBatch::DetectionBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detections_)*/{}
  , /*decltype(_impl_.processing_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_timestamp_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.sequence_number_)*/0u
  , /*decltype(_impl_.scan_period_)*/0
  , /*decltype(_impl_.azimuth_start_)*/0
  , /*decltype(_impl_.azimuth_end_)*/0
  , /*decltype(_impl_.elevation_start_)*/0
  , /*decltype(_impl_.elevation_end_)*/0
  , /*decltype(_impl_.processing_time_ms_)*/0
  , /*decltype(_impl_.total_detections_)*/0u
  , /*decltype(_impl_.filtered_detections_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionBatchDefaultTypeInternal() {}
  union {
    DetectionBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionBatchDefaultTypeInternal _DetectionBatch_default_instance_;
PROTOBUF_CONSTEXPR RadarStatus::RadarStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_.warnings_)*/{}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.is_active_)*/false
  , /*decltype(_impl_.antenna_rotating_)*/false
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_.memory_usage_mb_)*/0
  , /*decltype(_impl_.temperature_celsius_)*/0
  , /*decltype(_impl_.transmit_power_watts_)*/0
  , /*decltype(_impl_.receiver_gain_db_)*/0
  , /*decltype(_impl_.current_azimuth_)*/0
  , /*decltype(_impl_.current_elevation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadarStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarStatusDefaultTypeInternal() {}
  union {
    RadarStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarStatusDefaultTypeInternal _RadarStatus_default_instance_;
PROTOBUF_CONSTEXPR SignalProcessingConfig::SignalProcessingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detection_threshold_db_)*/0
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.range_gates_)*/0u
  , /*decltype(_impl_.false_alarm_rate_)*/0
  , /*decltype(_impl_.range_resolution_m_)*/0
  , /*decltype(_impl_.doppler_resolution_hz_)*/0
  , /*decltype(_impl_.doppler_bins_)*/0u
  , /*decltype(_impl_.cfar_guard_cells_)*/0u
  , /*decltype(_impl_.cfar_reference_cells_)*/0u
  , /*decltype(_impl_.enable_cfar_)*/false
  , /*decltype(_impl_.output_raw_detections_)*/false
  , /*decltype(_impl_.output_clustered_detections_)*/false
  , /*decltype(_impl_.max_output_rate_hz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalProcessingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalProcessingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalProcessingConfigDefaultTypeInternal() {}
  union {
    SignalProcessingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalProcessingConfigDefaultTypeInternal _SignalProcessingConfig_default_instance_;
PROTOBUF_CONSTEXPR RadarCommand_ParametersEntry_DoNotUse::RadarCommand_ParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RadarCommand_ParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarCommand_ParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarCommand_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RadarCommand_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarCommand_ParametersEntry_DoNotUseDefaultTypeInternal _RadarCommand_ParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RadarCommand::RadarCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.target_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.config_update_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.command_id_)*/0u
  , /*decltype(_impl_.beam_azimuth_)*/0
  , /*decltype(_impl_.beam_elevation_)*/0
  , /*decltype(_impl_.beam_duration_ms_)*/0
  , /*decltype(_impl_.command_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadarCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarCommandDefaultTypeInternal() {}
  union {
    RadarCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarCommandDefaultTypeInternal _RadarCommand_default_instance_;
PROTOBUF_CONSTEXPR RadarCommandResponse_ResultDataEntry_DoNotUse::RadarCommandResponse_ResultDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RadarCommandResponse_ResultDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarCommandResponse_ResultDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarCommandResponse_ResultDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RadarCommandResponse_ResultDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarCommandResponse_ResultDataEntry_DoNotUseDefaultTypeInternal _RadarCommandResponse_ResultDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RadarCommandResponse::RadarCommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.command_id_)*/0u
  , /*decltype(_impl_.execution_time_ms_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RadarCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarCommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarCommandResponseDefaultTypeInternal() {}
  union {
    RadarCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarCommandResponseDefaultTypeInternal _RadarCommandResponse_default_instance_;
PROTOBUF_CONSTEXPR PerformanceMetrics::PerformanceMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.processing_time_ms_)*/0
  , /*decltype(_impl_.detection_rate_)*/0
  , /*decltype(_impl_.sensor_id_)*/0u
  , /*decltype(_impl_.active_tracks_)*/0u
  , /*decltype(_impl_.false_alarm_rate_)*/0
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_.memory_usage_mb_)*/0
  , /*decltype(_impl_.input_latency_ms_)*/0
  , /*decltype(_impl_.processing_latency_ms_)*/0
  , /*decltype(_impl_.output_latency_ms_)*/0
  , /*decltype(_impl_.total_latency_ms_)*/0
  , /*decltype(_impl_.total_detections_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerformanceMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceMetricsDefaultTypeInternal() {}
  union {
    PerformanceMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceMetricsDefaultTypeInternal _PerformanceMetrics_default_instance_;
PROTOBUF_CONSTEXPR SystemHealth_ComponentHealthEntry_DoNotUse::SystemHealth_ComponentHealthEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SystemHealth_ComponentHealthEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemHealth_ComponentHealthEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemHealth_ComponentHealthEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemHealth_ComponentHealthEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemHealth_ComponentHealthEntry_DoNotUseDefaultTypeInternal _SystemHealth_ComponentHealthEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SystemHealth::SystemHealth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.component_health_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.recent_errors_)*/{}
  , /*decltype(_impl_.recent_warnings_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.cpu_usage_percent_)*/0
  , /*decltype(_impl_.memory_usage_percent_)*/0
  , /*decltype(_impl_.overall_status_)*/0
  , /*decltype(_impl_.error_count_last_hour_)*/0u
  , /*decltype(_impl_.disk_usage_percent_)*/0
  , /*decltype(_impl_.network_usage_mbps_)*/0
  , /*decltype(_impl_.warning_count_last_hour_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemHealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemHealthDefaultTypeInternal() {}
  union {
    SystemHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemHealthDefaultTypeInternal _SystemHealth_default_instance_;
}  // namespace messages
}  // namespace radar
static ::_pb::Metadata file_level_metadata_radar_5fmessages_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_radar_5fmessages_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_radar_5fmessages_2eproto = nullptr;

const uint32_t TableStruct_radar_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Point3D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Point3D, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Point3D, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Vector3D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Vector3D, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Vector3D, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Matrix3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Matrix3D, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.position_covariance_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.snr_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.amplitude_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.doppler_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.coord_system_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::Detection, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.detections_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.batch_timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.sequence_number_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.scan_period_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.azimuth_start_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.azimuth_end_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.elevation_start_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.elevation_end_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.processing_mode_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.processing_time_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.total_detections_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::DetectionBatch, _impl_.filtered_detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.is_active_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.memory_usage_mb_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.temperature_celsius_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.transmit_power_watts_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.receiver_gain_db_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.antenna_rotating_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.current_azimuth_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.current_elevation_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarStatus, _impl_.warnings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.detection_threshold_db_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.false_alarm_rate_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.range_gates_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.doppler_bins_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.range_resolution_m_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.doppler_resolution_hz_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.enable_cfar_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.cfar_guard_cells_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.cfar_reference_cells_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.output_raw_detections_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.output_clustered_detections_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SignalProcessingConfig, _impl_.max_output_rate_hz_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.command_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.command_type_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.target_mode_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.beam_azimuth_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.beam_elevation_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.beam_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.config_update_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommand, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.command_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.execution_time_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::RadarCommandResponse, _impl_.result_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.processing_time_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.detection_rate_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.false_alarm_rate_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.active_tracks_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.total_detections_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.memory_usage_mb_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.input_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.processing_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.output_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::PerformanceMetrics, _impl_.total_latency_ms_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.overall_status_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.component_health_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.cpu_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.memory_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.disk_usage_percent_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.network_usage_mbps_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.error_count_last_hour_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.warning_count_last_hour_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.recent_errors_),
  PROTOBUF_FIELD_OFFSET(::radar::messages::SystemHealth, _impl_.recent_warnings_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::radar::messages::Point3D)},
  { 9, -1, -1, sizeof(::radar::messages::Vector3D)},
  { 18, -1, -1, sizeof(::radar::messages::Matrix3D)},
  { 25, 33, -1, sizeof(::radar::messages::Detection_AttributesEntry_DoNotUse)},
  { 35, -1, -1, sizeof(::radar::messages::Detection)},
  { 54, -1, -1, sizeof(::radar::messages::DetectionBatch)},
  { 73, -1, -1, sizeof(::radar::messages::RadarStatus)},
  { 93, -1, -1, sizeof(::radar::messages::SignalProcessingConfig)},
  { 112, 120, -1, sizeof(::radar::messages::RadarCommand_ParametersEntry_DoNotUse)},
  { 122, -1, -1, sizeof(::radar::messages::RadarCommand)},
  { 138, 146, -1, sizeof(::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse)},
  { 148, -1, -1, sizeof(::radar::messages::RadarCommandResponse)},
  { 161, -1, -1, sizeof(::radar::messages::PerformanceMetrics)},
  { 180, 188, -1, sizeof(::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse)},
  { 190, -1, -1, sizeof(::radar::messages::SystemHealth)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::radar::messages::_Point3D_default_instance_._instance,
  &::radar::messages::_Vector3D_default_instance_._instance,
  &::radar::messages::_Matrix3D_default_instance_._instance,
  &::radar::messages::_Detection_AttributesEntry_DoNotUse_default_instance_._instance,
  &::radar::messages::_Detection_default_instance_._instance,
  &::radar::messages::_DetectionBatch_default_instance_._instance,
  &::radar::messages::_RadarStatus_default_instance_._instance,
  &::radar::messages::_SignalProcessingConfig_default_instance_._instance,
  &::radar::messages::_RadarCommand_ParametersEntry_DoNotUse_default_instance_._instance,
  &::radar::messages::_RadarCommand_default_instance_._instance,
  &::radar::messages::_RadarCommandResponse_ResultDataEntry_DoNotUse_default_instance_._instance,
  &::radar::messages::_RadarCommandResponse_default_instance_._instance,
  &::radar::messages::_PerformanceMetrics_default_instance_._instance,
  &::radar::messages::_SystemHealth_ComponentHealthEntry_DoNotUse_default_instance_._instance,
  &::radar::messages::_SystemHealth_default_instance_._instance,
};

const char descriptor_table_protodef_radar_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024radar_messages.proto\022\016radar.messages\032\037"
  "google/protobuf/timestamp.proto\"*\n\007Point"
  "3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"+\n\010V"
  "ector3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\"\030\n\010Matrix3D\022\014\n\004data\030\001 \003(\001\"\246\004\n\tDetection"
  "\022\n\n\002id\030\001 \001(\r\022\021\n\tsensor_id\030\002 \001(\r\022-\n\ttimes"
  "tamp\030\003 \001(\0132\032.google.protobuf.Timestamp\022)"
  "\n\010position\030\004 \001(\0132\027.radar.messages.Point3"
  "D\0225\n\023position_covariance\030\005 \001(\0132\030.radar.m"
  "essages.Matrix3D\022*\n\010velocity\030\006 \001(\0132\030.rad"
  "ar.messages.Vector3D\0225\n\023velocity_covaria"
  "nce\030\007 \001(\0132\030.radar.messages.Matrix3D\022\013\n\003s"
  "nr\030\010 \001(\001\022\021\n\tamplitude\030\t \001(\001\022\017\n\007doppler\030\n"
  " \001(\001\022+\n\004type\030\013 \001(\0162\035.radar.messages.Dete"
  "ctionType\0226\n\014coord_system\030\014 \001(\0162 .radar."
  "messages.CoordinateSystem\022=\n\nattributes\030"
  "\r \003(\0132).radar.messages.Detection.Attribu"
  "tesEntry\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\001:\0028\001\"\375\002\n\016DetectionBatch\022-"
  "\n\ndetections\030\001 \003(\0132\031.radar.messages.Dete"
  "ction\0223\n\017batch_timestamp\030\002 \001(\0132\032.google."
  "protobuf.Timestamp\022\021\n\tsensor_id\030\003 \001(\r\022\027\n"
  "\017sequence_number\030\004 \001(\r\022\023\n\013scan_period\030\005 "
  "\001(\001\022\025\n\razimuth_start\030\006 \001(\001\022\023\n\013azimuth_en"
  "d\030\007 \001(\001\022\027\n\017elevation_start\030\010 \001(\001\022\025\n\relev"
  "ation_end\030\t \001(\001\022\027\n\017processing_mode\030\n \001(\t"
  "\022\032\n\022processing_time_ms\030\013 \001(\001\022\030\n\020total_de"
  "tections\030\014 \001(\r\022\033\n\023filtered_detections\030\r "
  "\001(\r\"\341\002\n\013RadarStatus\022\021\n\tsensor_id\030\001 \001(\r\022-"
  "\n\ttimestamp\030\002 \001(\0132\032.google.protobuf.Time"
  "stamp\022\021\n\tis_active\030\003 \001(\010\022\014\n\004mode\030\004 \001(\t\022\021"
  "\n\tcpu_usage\030\005 \001(\001\022\027\n\017memory_usage_mb\030\006 \001"
  "(\001\022\033\n\023temperature_celsius\030\007 \001(\001\022\034\n\024trans"
  "mit_power_watts\030\010 \001(\001\022\030\n\020receiver_gain_d"
  "b\030\t \001(\001\022\030\n\020antenna_rotating\030\n \001(\010\022\027\n\017cur"
  "rent_azimuth\030\013 \001(\001\022\031\n\021current_elevation\030"
  "\014 \001(\001\022\016\n\006errors\030\r \003(\t\022\020\n\010warnings\030\016 \003(\t\""
  "\370\002\n\026SignalProcessingConfig\022\021\n\tsensor_id\030"
  "\001 \001(\r\022\036\n\026detection_threshold_db\030\002 \001(\001\022\030\n"
  "\020false_alarm_rate\030\003 \001(\001\022\023\n\013range_gates\030\004"
  " \001(\r\022\024\n\014doppler_bins\030\005 \001(\r\022\032\n\022range_reso"
  "lution_m\030\006 \001(\001\022\035\n\025doppler_resolution_hz\030"
  "\007 \001(\001\022\023\n\013enable_cfar\030\010 \001(\010\022\030\n\020cfar_guard"
  "_cells\030\t \001(\r\022\034\n\024cfar_reference_cells\030\n \001"
  "(\r\022\035\n\025output_raw_detections\030\013 \001(\010\022#\n\033out"
  "put_clustered_detections\030\014 \001(\010\022\032\n\022max_ou"
  "tput_rate_hz\030\r \001(\001\"\321\004\n\014RadarCommand\022\021\n\ts"
  "ensor_id\030\001 \001(\r\022-\n\ttimestamp\030\002 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\022\n\ncommand_id\030\003 \001("
  "\r\022>\n\014command_type\030\004 \001(\0162(.radar.messages"
  ".RadarCommand.CommandType\022\023\n\013target_mode"
  "\030\005 \001(\t\022\024\n\014beam_azimuth\030\006 \001(\001\022\026\n\016beam_ele"
  "vation\030\007 \001(\001\022\030\n\020beam_duration_ms\030\010 \001(\001\022="
  "\n\rconfig_update\030\t \001(\0132&.radar.messages.S"
  "ignalProcessingConfig\022@\n\nparameters\030\n \003("
  "\0132,.radar.messages.RadarCommand.Paramete"
  "rsEntry\0321\n\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\231\001\n\013CommandType\022\034\n\030CO"
  "MMAND_TYPE_UNSPECIFIED\020\000\022\016\n\nSTART_SCAN\020\001"
  "\022\r\n\tSTOP_SCAN\020\002\022\017\n\013CHANGE_MODE\020\003\022\021\n\rUPDA"
  "TE_CONFIG\020\004\022\020\n\014BEAM_REQUEST\020\005\022\t\n\005RESET\020\006"
  "\022\014\n\010SHUTDOWN\020\007\"\316\003\n\024RadarCommandResponse\022"
  "\021\n\tsensor_id\030\001 \001(\r\022\022\n\ncommand_id\030\002 \001(\r\022-"
  "\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.Time"
  "stamp\022C\n\006status\030\004 \001(\01623.radar.messages.R"
  "adarCommandResponse.ResponseStatus\022\017\n\007me"
  "ssage\030\005 \001(\t\022\031\n\021execution_time_ms\030\006 \001(\001\022I"
  "\n\013result_data\030\007 \003(\01324.radar.messages.Rad"
  "arCommandResponse.ResultDataEntry\0321\n\017Res"
  "ultDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\"q\n\016ResponseStatus\022\037\n\033RESPONSE_STATU"
  "S_UNSPECIFIED\020\000\022\013\n\007SUCCESS\020\001\022\013\n\007FAILURE\020"
  "\002\022\023\n\017PARTIAL_SUCCESS\020\003\022\017\n\013IN_PROGRESS\020\004\""
  "\357\002\n\022PerformanceMetrics\022-\n\ttimestamp\030\001 \001("
  "\0132\032.google.protobuf.Timestamp\022\021\n\tsensor_"
  "id\030\002 \001(\r\022\032\n\022processing_time_ms\030\003 \001(\001\022\026\n\016"
  "detection_rate\030\004 \001(\001\022\030\n\020false_alarm_rate"
  "\030\005 \001(\001\022\025\n\ractive_tracks\030\006 \001(\r\022\030\n\020total_d"
  "etections\030\007 \001(\r\022\021\n\tcpu_usage\030\010 \001(\001\022\027\n\017me"
  "mory_usage_mb\030\t \001(\001\022\030\n\020input_latency_ms\030"
  "\n \001(\001\022\035\n\025processing_latency_ms\030\013 \001(\001\022\031\n\021"
  "output_latency_ms\030\014 \001(\001\022\030\n\020total_latency"
  "_ms\030\r \001(\001\"\363\004\n\014SystemHealth\022-\n\ttimestamp\030"
  "\001 \001(\0132\032.google.protobuf.Timestamp\022A\n\016ove"
  "rall_status\030\002 \001(\0162).radar.messages.Syste"
  "mHealth.HealthStatus\022K\n\020component_health"
  "\030\003 \003(\01321.radar.messages.SystemHealth.Com"
  "ponentHealthEntry\022\031\n\021cpu_usage_percent\030\004"
  " \001(\001\022\034\n\024memory_usage_percent\030\005 \001(\001\022\032\n\022di"
  "sk_usage_percent\030\006 \001(\001\022\032\n\022network_usage_"
  "mbps\030\007 \001(\001\022\035\n\025error_count_last_hour\030\010 \001("
  "\r\022\037\n\027warning_count_last_hour\030\t \001(\r\022\025\n\rre"
  "cent_errors\030\n \003(\t\022\027\n\017recent_warnings\030\013 \003"
  "(\t\032a\n\024ComponentHealthEntry\022\013\n\003key\030\001 \001(\t\022"
  "8\n\005value\030\002 \001(\0162).radar.messages.SystemHe"
  "alth.HealthStatus:\0028\001\"`\n\014HealthStatus\022\035\n"
  "\031HEALTH_STATUS_UNSPECIFIED\020\000\022\013\n\007HEALTHY\020"
  "\001\022\013\n\007WARNING\020\002\022\t\n\005ERROR\020\003\022\014\n\010CRITICAL\020\004*"
  "i\n\020CoordinateSystem\022!\n\035COORDINATE_SYSTEM"
  "_UNSPECIFIED\020\000\022\r\n\tCARTESIAN\020\001\022\t\n\005POLAR\020\002"
  "\022\r\n\tSPHERICAL\020\003\022\t\n\005WGS84\020\004*p\n\rDetectionT"
  "ype\022\036\n\032DETECTION_TYPE_UNSPECIFIED\020\000\022\020\n\014P"
  "OINT_TARGET\020\001\022\023\n\017EXTENDED_TARGET\020\002\022\013\n\007CL"
  "UTTER\020\003\022\013\n\007UNKNOWN\020\004*\220\001\n\013MotionModel\022\034\n\030"
  "MOTION_MODEL_UNSPECIFIED\020\000\022\025\n\021CONSTANT_V"
  "ELOCITY\020\001\022\031\n\025CONSTANT_ACCELERATION\020\002\022\031\n\025"
  "COORDINATED_TURN_RATE\020\003\022\n\n\006SINGER\020\004\022\n\n\006C"
  "USTOM\020\005*b\n\nTrackState\022\033\n\027TRACK_STATE_UNS"
  "PECIFIED\020\000\022\r\n\tTENTATIVE\020\001\022\r\n\tCONFIRMED\020\002"
  "\022\014\n\010COASTING\020\003\022\013\n\007DELETED\020\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_radar_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_radar_5fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_radar_5fmessages_2eproto = {
    false, false, 4395, descriptor_table_protodef_radar_5fmessages_2eproto,
    "radar_messages.proto",
    &descriptor_table_radar_5fmessages_2eproto_once, descriptor_table_radar_5fmessages_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_radar_5fmessages_2eproto::offsets,
    file_level_metadata_radar_5fmessages_2eproto, file_level_enum_descriptors_radar_5fmessages_2eproto,
    file_level_service_descriptors_radar_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_radar_5fmessages_2eproto_getter() {
  return &descriptor_table_radar_5fmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_radar_5fmessages_2eproto(&descriptor_table_radar_5fmessages_2eproto);
namespace radar {
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarCommand_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[0];
}
bool RadarCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RadarCommand_CommandType RadarCommand::COMMAND_TYPE_UNSPECIFIED;
constexpr RadarCommand_CommandType RadarCommand::START_SCAN;
constexpr RadarCommand_CommandType RadarCommand::STOP_SCAN;
constexpr RadarCommand_CommandType RadarCommand::CHANGE_MODE;
constexpr RadarCommand_CommandType RadarCommand::UPDATE_CONFIG;
constexpr RadarCommand_CommandType RadarCommand::BEAM_REQUEST;
constexpr RadarCommand_CommandType RadarCommand::RESET;
constexpr RadarCommand_CommandType RadarCommand::SHUTDOWN;
constexpr RadarCommand_CommandType RadarCommand::CommandType_MIN;
constexpr RadarCommand_CommandType RadarCommand::CommandType_MAX;
constexpr int RadarCommand::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarCommandResponse_ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[1];
}
bool RadarCommandResponse_ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::RESPONSE_STATUS_UNSPECIFIED;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::SUCCESS;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::FAILURE;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::PARTIAL_SUCCESS;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::IN_PROGRESS;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::ResponseStatus_MIN;
constexpr RadarCommandResponse_ResponseStatus RadarCommandResponse::ResponseStatus_MAX;
constexpr int RadarCommandResponse::ResponseStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemHealth_HealthStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[2];
}
bool SystemHealth_HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SystemHealth_HealthStatus SystemHealth::HEALTH_STATUS_UNSPECIFIED;
constexpr SystemHealth_HealthStatus SystemHealth::HEALTHY;
constexpr SystemHealth_HealthStatus SystemHealth::WARNING;
constexpr SystemHealth_HealthStatus SystemHealth::ERROR;
constexpr SystemHealth_HealthStatus SystemHealth::CRITICAL;
constexpr SystemHealth_HealthStatus SystemHealth::HealthStatus_MIN;
constexpr SystemHealth_HealthStatus SystemHealth::HealthStatus_MAX;
constexpr int SystemHealth::HealthStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordinateSystem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[3];
}
bool CoordinateSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[4];
}
bool DetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[5];
}
bool MotionModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_radar_5fmessages_2eproto);
  return file_level_enum_descriptors_radar_5fmessages_2eproto[6];
}
bool TrackState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.Point3D)
}

inline void Point3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:radar.messages.Point3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.Point3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.Point3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.Point3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point3D::GetClassData() const { return &_class_data_; }


void Point3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point3D*>(&to_msg);
  auto& from = static_cast<const Point3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.Point3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)
      + sizeof(Point3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[0]);
}

// ===================================================================

class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.Vector3D)
}

inline void Vector3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:radar.messages.Vector3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.Vector3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.Vector3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.Vector3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3D::GetClassData() const { return &_class_data_; }


void Vector3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3D*>(&to_msg);
  auto& from = static_cast<const Vector3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.Vector3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.z_)
      + sizeof(Vector3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[1]);
}

// ===================================================================

class Matrix3D::_Internal {
 public:
};

Matrix3D::Matrix3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.Matrix3D)
}
Matrix3D::Matrix3D(const Matrix3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix3D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:radar.messages.Matrix3D)
}

inline void Matrix3D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix3D::~Matrix3D() {
  // @@protoc_insertion_point(destructor:radar.messages.Matrix3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void Matrix3D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix3D::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.Matrix3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.Matrix3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.Matrix3D)
  return target;
}

size_t Matrix3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.Matrix3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix3D::GetClassData() const { return &_class_data_; }


void Matrix3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix3D*>(&to_msg);
  auto& from = static_cast<const Matrix3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.Matrix3D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix3D::CopyFrom(const Matrix3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.Matrix3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3D::IsInitialized() const {
  return true;
}

void Matrix3D::InternalSwap(Matrix3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[2]);
}

// ===================================================================

Detection_AttributesEntry_DoNotUse::Detection_AttributesEntry_DoNotUse() {}
Detection_AttributesEntry_DoNotUse::Detection_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Detection_AttributesEntry_DoNotUse::MergeFrom(const Detection_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Detection_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[3]);
}

// ===================================================================

class Detection::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Detection* msg);
  static const ::radar::messages::Point3D& position(const Detection* msg);
  static const ::radar::messages::Matrix3D& position_covariance(const Detection* msg);
  static const ::radar::messages::Vector3D& velocity(const Detection* msg);
  static const ::radar::messages::Matrix3D& velocity_covariance(const Detection* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Detection::_Internal::timestamp(const Detection* msg) {
  return *msg->_impl_.timestamp_;
}
const ::radar::messages::Point3D&
Detection::_Internal::position(const Detection* msg) {
  return *msg->_impl_.position_;
}
const ::radar::messages::Matrix3D&
Detection::_Internal::position_covariance(const Detection* msg) {
  return *msg->_impl_.position_covariance_;
}
const ::radar::messages::Vector3D&
Detection::_Internal::velocity(const Detection* msg) {
  return *msg->_impl_.velocity_;
}
const ::radar::messages::Matrix3D&
Detection::_Internal::velocity_covariance(const Detection* msg) {
  return *msg->_impl_.velocity_covariance_;
}
void Detection::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
Detection::Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Detection::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:radar.messages.Detection)
}
Detection::Detection(const Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Detection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_covariance_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.velocity_covariance_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.snr_){}
    , decltype(_impl_.amplitude_){}
    , decltype(_impl_.doppler_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.coord_system_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::radar::messages::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_position_covariance()) {
    _this->_impl_.position_covariance_ = new ::radar::messages::Matrix3D(*from._impl_.position_covariance_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::radar::messages::Vector3D(*from._impl_.velocity_);
  }
  if (from._internal_has_velocity_covariance()) {
    _this->_impl_.velocity_covariance_ = new ::radar::messages::Matrix3D(*from._impl_.velocity_covariance_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coord_system_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.coord_system_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.Detection)
}

inline void Detection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_covariance_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.velocity_covariance_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.snr_){0}
    , decltype(_impl_.amplitude_){0}
    , decltype(_impl_.doppler_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.coord_system_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:radar.messages.Detection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Detection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.position_covariance_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.velocity_covariance_;
}

void Detection::ArenaDtor(void* object) {
  Detection* _this = reinterpret_cast< Detection* >(object);
  _this->_impl_.attributes_.Destruct();
}
void Detection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.Detection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_covariance_ != nullptr) {
    delete _impl_.position_covariance_;
  }
  _impl_.position_covariance_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_covariance_ != nullptr) {
    delete _impl_.velocity_covariance_;
  }
  _impl_.velocity_covariance_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.coord_system_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.coord_system_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.Point3D position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.Matrix3D position_covariance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.Vector3D velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.Matrix3D velocity_covariance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double amplitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double doppler = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.DetectionType type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::radar::messages::DetectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.CoordinateSystem coord_system = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_coord_system(static_cast<::radar::messages::CoordinateSystem>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> attributes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.Detection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 sensor_id = 2;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensor_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.Point3D position = 4;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.Matrix3D position_covariance = 5;
  if (this->_internal_has_position_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position_covariance(this),
        _Internal::position_covariance(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.Vector3D velocity = 6;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.Matrix3D velocity_covariance = 7;
  if (this->_internal_has_velocity_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::velocity_covariance(this),
        _Internal::velocity_covariance(this).GetCachedSize(), target, stream);
  }

  // double snr = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_snr = this->_internal_snr();
  uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_snr(), target);
  }

  // double amplitude = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = this->_internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_amplitude(), target);
  }

  // double doppler = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler = this->_internal_doppler();
  uint64_t raw_doppler;
  memcpy(&raw_doppler, &tmp_doppler, sizeof(tmp_doppler));
  if (raw_doppler != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_doppler(), target);
  }

  // .radar.messages.DetectionType type = 11;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // .radar.messages.CoordinateSystem coord_system = 12;
  if (this->_internal_coord_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_coord_system(), target);
  }

  // map<string, double> attributes = 13;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = Detection_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.Detection.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.Detection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> attributes = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += Detection_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .radar.messages.Point3D position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .radar.messages.Matrix3D position_covariance = 5;
  if (this->_internal_has_position_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_covariance_);
  }

  // .radar.messages.Vector3D velocity = 6;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // .radar.messages.Matrix3D velocity_covariance = 7;
  if (this->_internal_has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_covariance_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 sensor_id = 2;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // double snr = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_snr = this->_internal_snr();
  uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    total_size += 1 + 8;
  }

  // double amplitude = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = this->_internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    total_size += 1 + 8;
  }

  // double doppler = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler = this->_internal_doppler();
  uint64_t raw_doppler;
  memcpy(&raw_doppler, &tmp_doppler, sizeof(tmp_doppler));
  if (raw_doppler != 0) {
    total_size += 1 + 8;
  }

  // .radar.messages.DetectionType type = 11;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .radar.messages.CoordinateSystem coord_system = 12;
  if (this->_internal_coord_system() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_coord_system());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Detection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detection::GetClassData() const { return &_class_data_; }


void Detection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Detection*>(&to_msg);
  auto& from = static_cast<const Detection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.Detection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::radar::messages::Point3D::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_position_covariance()) {
    _this->_internal_mutable_position_covariance()->::radar::messages::Matrix3D::MergeFrom(
        from._internal_position_covariance());
  }
  if (from._internal_has_velocity()) {
    _this->_internal_mutable_velocity()->::radar::messages::Vector3D::MergeFrom(
        from._internal_velocity());
  }
  if (from._internal_has_velocity_covariance()) {
    _this->_internal_mutable_velocity_covariance()->::radar::messages::Matrix3D::MergeFrom(
        from._internal_velocity_covariance());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_snr = from._internal_snr();
  uint64_t raw_snr;
  memcpy(&raw_snr, &tmp_snr, sizeof(tmp_snr));
  if (raw_snr != 0) {
    _this->_internal_set_snr(from._internal_snr());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amplitude = from._internal_amplitude();
  uint64_t raw_amplitude;
  memcpy(&raw_amplitude, &tmp_amplitude, sizeof(tmp_amplitude));
  if (raw_amplitude != 0) {
    _this->_internal_set_amplitude(from._internal_amplitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler = from._internal_doppler();
  uint64_t raw_doppler;
  memcpy(&raw_doppler, &tmp_doppler, sizeof(tmp_doppler));
  if (raw_doppler != 0) {
    _this->_internal_set_doppler(from._internal_doppler());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_coord_system() != 0) {
    _this->_internal_set_coord_system(from._internal_coord_system());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  return true;
}

void Detection::InternalSwap(Detection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection, _impl_.coord_system_)
      + sizeof(Detection::_impl_.coord_system_)
      - PROTOBUF_FIELD_OFFSET(Detection, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[4]);
}

// ===================================================================

class DetectionBatch::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& batch_timestamp(const DetectionBatch* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DetectionBatch::_Internal::batch_timestamp(const DetectionBatch* msg) {
  return *msg->_impl_.batch_timestamp_;
}
void DetectionBatch::clear_batch_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.batch_timestamp_ != nullptr) {
    delete _impl_.batch_timestamp_;
  }
  _impl_.batch_timestamp_ = nullptr;
}
DetectionBatch::DetectionBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.DetectionBatch)
}
DetectionBatch::DetectionBatch(const DetectionBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectionBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detections_){from._impl_.detections_}
    , decltype(_impl_.processing_mode_){}
    , decltype(_impl_.batch_timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.scan_period_){}
    , decltype(_impl_.azimuth_start_){}
    , decltype(_impl_.azimuth_end_){}
    , decltype(_impl_.elevation_start_){}
    , decltype(_impl_.elevation_end_){}
    , decltype(_impl_.processing_time_ms_){}
    , decltype(_impl_.total_detections_){}
    , decltype(_impl_.filtered_detections_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.processing_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processing_mode().empty()) {
    _this->_impl_.processing_mode_.Set(from._internal_processing_mode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_batch_timestamp()) {
    _this->_impl_.batch_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.batch_timestamp_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filtered_detections_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.filtered_detections_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.DetectionBatch)
}

inline void DetectionBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detections_){arena}
    , decltype(_impl_.processing_mode_){}
    , decltype(_impl_.batch_timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.sequence_number_){0u}
    , decltype(_impl_.scan_period_){0}
    , decltype(_impl_.azimuth_start_){0}
    , decltype(_impl_.azimuth_end_){0}
    , decltype(_impl_.elevation_start_){0}
    , decltype(_impl_.elevation_end_){0}
    , decltype(_impl_.processing_time_ms_){0}
    , decltype(_impl_.total_detections_){0u}
    , decltype(_impl_.filtered_detections_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.processing_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processing_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetectionBatch::~DetectionBatch() {
  // @@protoc_insertion_point(destructor:radar.messages.DetectionBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detections_.~RepeatedPtrField();
  _impl_.processing_mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.batch_timestamp_;
}

void DetectionBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.DetectionBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detections_.Clear();
  _impl_.processing_mode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.batch_timestamp_ != nullptr) {
    delete _impl_.batch_timestamp_;
  }
  _impl_.batch_timestamp_ = nullptr;
  ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filtered_detections_) -
      reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.filtered_detections_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .radar.messages.Detection detections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp batch_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sensor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double scan_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.scan_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double azimuth_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.azimuth_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double azimuth_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.azimuth_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elevation_start = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.elevation_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elevation_end = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.elevation_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string processing_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_processing_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "radar.messages.DetectionBatch.processing_mode"));
        } else
          goto handle_unusual;
        continue;
      // double processing_time_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_detections = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.total_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 filtered_detections = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.filtered_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.DetectionBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .radar.messages.Detection detections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp batch_timestamp = 2;
  if (this->_internal_has_batch_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::batch_timestamp(this),
        _Internal::batch_timestamp(this).GetCachedSize(), target, stream);
  }

  // uint32 sensor_id = 3;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sensor_id(), target);
  }

  // uint32 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence_number(), target);
  }

  // double scan_period = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_period = this->_internal_scan_period();
  uint64_t raw_scan_period;
  memcpy(&raw_scan_period, &tmp_scan_period, sizeof(tmp_scan_period));
  if (raw_scan_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_scan_period(), target);
  }

  // double azimuth_start = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_start = this->_internal_azimuth_start();
  uint64_t raw_azimuth_start;
  memcpy(&raw_azimuth_start, &tmp_azimuth_start, sizeof(tmp_azimuth_start));
  if (raw_azimuth_start != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_azimuth_start(), target);
  }

  // double azimuth_end = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_end = this->_internal_azimuth_end();
  uint64_t raw_azimuth_end;
  memcpy(&raw_azimuth_end, &tmp_azimuth_end, sizeof(tmp_azimuth_end));
  if (raw_azimuth_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_azimuth_end(), target);
  }

  // double elevation_start = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_start = this->_internal_elevation_start();
  uint64_t raw_elevation_start;
  memcpy(&raw_elevation_start, &tmp_elevation_start, sizeof(tmp_elevation_start));
  if (raw_elevation_start != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_elevation_start(), target);
  }

  // double elevation_end = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_end = this->_internal_elevation_end();
  uint64_t raw_elevation_end;
  memcpy(&raw_elevation_end, &tmp_elevation_end, sizeof(tmp_elevation_end));
  if (raw_elevation_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_elevation_end(), target);
  }

  // string processing_mode = 10;
  if (!this->_internal_processing_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processing_mode().data(), static_cast<int>(this->_internal_processing_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.DetectionBatch.processing_mode");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_processing_mode(), target);
  }

  // double processing_time_ms = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_processing_time_ms(), target);
  }

  // uint32 total_detections = 12;
  if (this->_internal_total_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_total_detections(), target);
  }

  // uint32 filtered_detections = 13;
  if (this->_internal_filtered_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_filtered_detections(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.DetectionBatch)
  return target;
}

size_t DetectionBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.DetectionBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .radar.messages.Detection detections = 1;
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->_impl_.detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string processing_mode = 10;
  if (!this->_internal_processing_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processing_mode());
  }

  // .google.protobuf.Timestamp batch_timestamp = 2;
  if (this->_internal_has_batch_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_timestamp_);
  }

  // uint32 sensor_id = 3;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 sequence_number = 4;
  if (this->_internal_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_number());
  }

  // double scan_period = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_period = this->_internal_scan_period();
  uint64_t raw_scan_period;
  memcpy(&raw_scan_period, &tmp_scan_period, sizeof(tmp_scan_period));
  if (raw_scan_period != 0) {
    total_size += 1 + 8;
  }

  // double azimuth_start = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_start = this->_internal_azimuth_start();
  uint64_t raw_azimuth_start;
  memcpy(&raw_azimuth_start, &tmp_azimuth_start, sizeof(tmp_azimuth_start));
  if (raw_azimuth_start != 0) {
    total_size += 1 + 8;
  }

  // double azimuth_end = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_end = this->_internal_azimuth_end();
  uint64_t raw_azimuth_end;
  memcpy(&raw_azimuth_end, &tmp_azimuth_end, sizeof(tmp_azimuth_end));
  if (raw_azimuth_end != 0) {
    total_size += 1 + 8;
  }

  // double elevation_start = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_start = this->_internal_elevation_start();
  uint64_t raw_elevation_start;
  memcpy(&raw_elevation_start, &tmp_elevation_start, sizeof(tmp_elevation_start));
  if (raw_elevation_start != 0) {
    total_size += 1 + 8;
  }

  // double elevation_end = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_end = this->_internal_elevation_end();
  uint64_t raw_elevation_end;
  memcpy(&raw_elevation_end, &tmp_elevation_end, sizeof(tmp_elevation_end));
  if (raw_elevation_end != 0) {
    total_size += 1 + 8;
  }

  // double processing_time_ms = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    total_size += 1 + 8;
  }

  // uint32 total_detections = 12;
  if (this->_internal_total_detections() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_detections());
  }

  // uint32 filtered_detections = 13;
  if (this->_internal_filtered_detections() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_filtered_detections());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectionBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionBatch::GetClassData() const { return &_class_data_; }


void DetectionBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectionBatch*>(&to_msg);
  auto& from = static_cast<const DetectionBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.DetectionBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.detections_.MergeFrom(from._impl_.detections_);
  if (!from._internal_processing_mode().empty()) {
    _this->_internal_set_processing_mode(from._internal_processing_mode());
  }
  if (from._internal_has_batch_timestamp()) {
    _this->_internal_mutable_batch_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_batch_timestamp());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scan_period = from._internal_scan_period();
  uint64_t raw_scan_period;
  memcpy(&raw_scan_period, &tmp_scan_period, sizeof(tmp_scan_period));
  if (raw_scan_period != 0) {
    _this->_internal_set_scan_period(from._internal_scan_period());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_start = from._internal_azimuth_start();
  uint64_t raw_azimuth_start;
  memcpy(&raw_azimuth_start, &tmp_azimuth_start, sizeof(tmp_azimuth_start));
  if (raw_azimuth_start != 0) {
    _this->_internal_set_azimuth_start(from._internal_azimuth_start());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_end = from._internal_azimuth_end();
  uint64_t raw_azimuth_end;
  memcpy(&raw_azimuth_end, &tmp_azimuth_end, sizeof(tmp_azimuth_end));
  if (raw_azimuth_end != 0) {
    _this->_internal_set_azimuth_end(from._internal_azimuth_end());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_start = from._internal_elevation_start();
  uint64_t raw_elevation_start;
  memcpy(&raw_elevation_start, &tmp_elevation_start, sizeof(tmp_elevation_start));
  if (raw_elevation_start != 0) {
    _this->_internal_set_elevation_start(from._internal_elevation_start());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_end = from._internal_elevation_end();
  uint64_t raw_elevation_end;
  memcpy(&raw_elevation_end, &tmp_elevation_end, sizeof(tmp_elevation_end));
  if (raw_elevation_end != 0) {
    _this->_internal_set_elevation_end(from._internal_elevation_end());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = from._internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    _this->_internal_set_processing_time_ms(from._internal_processing_time_ms());
  }
  if (from._internal_total_detections() != 0) {
    _this->_internal_set_total_detections(from._internal_total_detections());
  }
  if (from._internal_filtered_detections() != 0) {
    _this->_internal_set_filtered_detections(from._internal_filtered_detections());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionBatch::CopyFrom(const DetectionBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.DetectionBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionBatch::IsInitialized() const {
  return true;
}

void DetectionBatch::InternalSwap(DetectionBatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.detections_.InternalSwap(&other->_impl_.detections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processing_mode_, lhs_arena,
      &other->_impl_.processing_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionBatch, _impl_.filtered_detections_)
      + sizeof(DetectionBatch::_impl_.filtered_detections_)
      - PROTOBUF_FIELD_OFFSET(DetectionBatch, _impl_.batch_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.batch_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.batch_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[5]);
}

// ===================================================================

class RadarStatus::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RadarStatus* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadarStatus::_Internal::timestamp(const RadarStatus* msg) {
  return *msg->_impl_.timestamp_;
}
void RadarStatus::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
RadarStatus::RadarStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.RadarStatus)
}
RadarStatus::RadarStatus(const RadarStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errors_){from._impl_.errors_}
    , decltype(_impl_.warnings_){from._impl_.warnings_}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.is_active_){}
    , decltype(_impl_.antenna_rotating_){}
    , decltype(_impl_.cpu_usage_){}
    , decltype(_impl_.memory_usage_mb_){}
    , decltype(_impl_.temperature_celsius_){}
    , decltype(_impl_.transmit_power_watts_){}
    , decltype(_impl_.receiver_gain_db_){}
    , decltype(_impl_.current_azimuth_){}
    , decltype(_impl_.current_elevation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_elevation_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.current_elevation_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.RadarStatus)
}

inline void RadarStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errors_){arena}
    , decltype(_impl_.warnings_){arena}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.is_active_){false}
    , decltype(_impl_.antenna_rotating_){false}
    , decltype(_impl_.cpu_usage_){0}
    , decltype(_impl_.memory_usage_mb_){0}
    , decltype(_impl_.temperature_celsius_){0}
    , decltype(_impl_.transmit_power_watts_){0}
    , decltype(_impl_.receiver_gain_db_){0}
    , decltype(_impl_.current_azimuth_){0}
    , decltype(_impl_.current_elevation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadarStatus::~RadarStatus() {
  // @@protoc_insertion_point(destructor:radar.messages.RadarStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errors_.~RepeatedPtrField();
  _impl_.warnings_.~RepeatedPtrField();
  _impl_.mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void RadarStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.RadarStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errors_.Clear();
  _impl_.warnings_.Clear();
  _impl_.mode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_elevation_) -
      reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.current_elevation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "radar.messages.RadarStatus.mode"));
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double memory_usage_mb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.memory_usage_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double temperature_celsius = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.temperature_celsius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double transmit_power_watts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.transmit_power_watts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double receiver_gain_db = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.receiver_gain_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool antenna_rotating = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.antenna_rotating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double current_azimuth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.current_azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_elevation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.current_elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string errors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "radar.messages.RadarStatus.errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string warnings = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "radar.messages.RadarStatus.warnings"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.RadarStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_active(), target);
  }

  // string mode = 4;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.RadarStatus.mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mode(), target);
  }

  // double cpu_usage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_cpu_usage(), target);
  }

  // double memory_usage_mb = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_memory_usage_mb(), target);
  }

  // double temperature_celsius = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature_celsius = this->_internal_temperature_celsius();
  uint64_t raw_temperature_celsius;
  memcpy(&raw_temperature_celsius, &tmp_temperature_celsius, sizeof(tmp_temperature_celsius));
  if (raw_temperature_celsius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_temperature_celsius(), target);
  }

  // double transmit_power_watts = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transmit_power_watts = this->_internal_transmit_power_watts();
  uint64_t raw_transmit_power_watts;
  memcpy(&raw_transmit_power_watts, &tmp_transmit_power_watts, sizeof(tmp_transmit_power_watts));
  if (raw_transmit_power_watts != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_transmit_power_watts(), target);
  }

  // double receiver_gain_db = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_receiver_gain_db = this->_internal_receiver_gain_db();
  uint64_t raw_receiver_gain_db;
  memcpy(&raw_receiver_gain_db, &tmp_receiver_gain_db, sizeof(tmp_receiver_gain_db));
  if (raw_receiver_gain_db != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_receiver_gain_db(), target);
  }

  // bool antenna_rotating = 10;
  if (this->_internal_antenna_rotating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_antenna_rotating(), target);
  }

  // double current_azimuth = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_azimuth = this->_internal_current_azimuth();
  uint64_t raw_current_azimuth;
  memcpy(&raw_current_azimuth, &tmp_current_azimuth, sizeof(tmp_current_azimuth));
  if (raw_current_azimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_current_azimuth(), target);
  }

  // double current_elevation = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_elevation = this->_internal_current_elevation();
  uint64_t raw_current_elevation;
  memcpy(&raw_current_elevation, &tmp_current_elevation, sizeof(tmp_current_elevation));
  if (raw_current_elevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_current_elevation(), target);
  }

  // repeated string errors = 13;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.RadarStatus.errors");
    target = stream->WriteString(13, s, target);
  }

  // repeated string warnings = 14;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.RadarStatus.warnings");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.RadarStatus)
  return target;
}

size_t RadarStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.RadarStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string errors = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.errors_.size());
  for (int i = 0, n = _impl_.errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.errors_.Get(i));
  }

  // repeated string warnings = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.warnings_.size());
  for (int i = 0, n = _impl_.warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.warnings_.Get(i));
  }

  // string mode = 4;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool antenna_rotating = 10;
  if (this->_internal_antenna_rotating() != 0) {
    total_size += 1 + 1;
  }

  // double cpu_usage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 8;
  }

  // double memory_usage_mb = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    total_size += 1 + 8;
  }

  // double temperature_celsius = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature_celsius = this->_internal_temperature_celsius();
  uint64_t raw_temperature_celsius;
  memcpy(&raw_temperature_celsius, &tmp_temperature_celsius, sizeof(tmp_temperature_celsius));
  if (raw_temperature_celsius != 0) {
    total_size += 1 + 8;
  }

  // double transmit_power_watts = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transmit_power_watts = this->_internal_transmit_power_watts();
  uint64_t raw_transmit_power_watts;
  memcpy(&raw_transmit_power_watts, &tmp_transmit_power_watts, sizeof(tmp_transmit_power_watts));
  if (raw_transmit_power_watts != 0) {
    total_size += 1 + 8;
  }

  // double receiver_gain_db = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_receiver_gain_db = this->_internal_receiver_gain_db();
  uint64_t raw_receiver_gain_db;
  memcpy(&raw_receiver_gain_db, &tmp_receiver_gain_db, sizeof(tmp_receiver_gain_db));
  if (raw_receiver_gain_db != 0) {
    total_size += 1 + 8;
  }

  // double current_azimuth = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_azimuth = this->_internal_current_azimuth();
  uint64_t raw_current_azimuth;
  memcpy(&raw_current_azimuth, &tmp_current_azimuth, sizeof(tmp_current_azimuth));
  if (raw_current_azimuth != 0) {
    total_size += 1 + 8;
  }

  // double current_elevation = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_elevation = this->_internal_current_elevation();
  uint64_t raw_current_elevation;
  memcpy(&raw_current_elevation, &tmp_current_elevation, sizeof(tmp_current_elevation));
  if (raw_current_elevation != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarStatus::GetClassData() const { return &_class_data_; }


void RadarStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarStatus*>(&to_msg);
  auto& from = static_cast<const RadarStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.RadarStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  _this->_impl_.warnings_.MergeFrom(from._impl_.warnings_);
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_antenna_rotating() != 0) {
    _this->_internal_set_antenna_rotating(from._internal_antenna_rotating());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = from._internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    _this->_internal_set_memory_usage_mb(from._internal_memory_usage_mb());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature_celsius = from._internal_temperature_celsius();
  uint64_t raw_temperature_celsius;
  memcpy(&raw_temperature_celsius, &tmp_temperature_celsius, sizeof(tmp_temperature_celsius));
  if (raw_temperature_celsius != 0) {
    _this->_internal_set_temperature_celsius(from._internal_temperature_celsius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_transmit_power_watts = from._internal_transmit_power_watts();
  uint64_t raw_transmit_power_watts;
  memcpy(&raw_transmit_power_watts, &tmp_transmit_power_watts, sizeof(tmp_transmit_power_watts));
  if (raw_transmit_power_watts != 0) {
    _this->_internal_set_transmit_power_watts(from._internal_transmit_power_watts());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_receiver_gain_db = from._internal_receiver_gain_db();
  uint64_t raw_receiver_gain_db;
  memcpy(&raw_receiver_gain_db, &tmp_receiver_gain_db, sizeof(tmp_receiver_gain_db));
  if (raw_receiver_gain_db != 0) {
    _this->_internal_set_receiver_gain_db(from._internal_receiver_gain_db());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_azimuth = from._internal_current_azimuth();
  uint64_t raw_current_azimuth;
  memcpy(&raw_current_azimuth, &tmp_current_azimuth, sizeof(tmp_current_azimuth));
  if (raw_current_azimuth != 0) {
    _this->_internal_set_current_azimuth(from._internal_current_azimuth());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_elevation = from._internal_current_elevation();
  uint64_t raw_current_elevation;
  memcpy(&raw_current_elevation, &tmp_current_elevation, sizeof(tmp_current_elevation));
  if (raw_current_elevation != 0) {
    _this->_internal_set_current_elevation(from._internal_current_elevation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarStatus::CopyFrom(const RadarStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.RadarStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarStatus::IsInitialized() const {
  return true;
}

void RadarStatus::InternalSwap(RadarStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarStatus, _impl_.current_elevation_)
      + sizeof(RadarStatus::_impl_.current_elevation_)
      - PROTOBUF_FIELD_OFFSET(RadarStatus, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[6]);
}

// ===================================================================

class SignalProcessingConfig::_Internal {
 public:
};

SignalProcessingConfig::SignalProcessingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.SignalProcessingConfig)
}
SignalProcessingConfig::SignalProcessingConfig(const SignalProcessingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalProcessingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detection_threshold_db_){}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.range_gates_){}
    , decltype(_impl_.false_alarm_rate_){}
    , decltype(_impl_.range_resolution_m_){}
    , decltype(_impl_.doppler_resolution_hz_){}
    , decltype(_impl_.doppler_bins_){}
    , decltype(_impl_.cfar_guard_cells_){}
    , decltype(_impl_.cfar_reference_cells_){}
    , decltype(_impl_.enable_cfar_){}
    , decltype(_impl_.output_raw_detections_){}
    , decltype(_impl_.output_clustered_detections_){}
    , decltype(_impl_.max_output_rate_hz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.detection_threshold_db_, &from._impl_.detection_threshold_db_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_output_rate_hz_) -
    reinterpret_cast<char*>(&_impl_.detection_threshold_db_)) + sizeof(_impl_.max_output_rate_hz_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.SignalProcessingConfig)
}

inline void SignalProcessingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detection_threshold_db_){0}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.range_gates_){0u}
    , decltype(_impl_.false_alarm_rate_){0}
    , decltype(_impl_.range_resolution_m_){0}
    , decltype(_impl_.doppler_resolution_hz_){0}
    , decltype(_impl_.doppler_bins_){0u}
    , decltype(_impl_.cfar_guard_cells_){0u}
    , decltype(_impl_.cfar_reference_cells_){0u}
    , decltype(_impl_.enable_cfar_){false}
    , decltype(_impl_.output_raw_detections_){false}
    , decltype(_impl_.output_clustered_detections_){false}
    , decltype(_impl_.max_output_rate_hz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalProcessingConfig::~SignalProcessingConfig() {
  // @@protoc_insertion_point(destructor:radar.messages.SignalProcessingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalProcessingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalProcessingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalProcessingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.SignalProcessingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.detection_threshold_db_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_output_rate_hz_) -
      reinterpret_cast<char*>(&_impl_.detection_threshold_db_)) + sizeof(_impl_.max_output_rate_hz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalProcessingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double detection_threshold_db = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.detection_threshold_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double false_alarm_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.false_alarm_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 range_gates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.range_gates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 doppler_bins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.doppler_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double range_resolution_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.range_resolution_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double doppler_resolution_hz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.doppler_resolution_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool enable_cfar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.enable_cfar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cfar_guard_cells = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cfar_guard_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cfar_reference_cells = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cfar_reference_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool output_raw_detections = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.output_raw_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool output_clustered_detections = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.output_clustered_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_output_rate_hz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.max_output_rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalProcessingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.SignalProcessingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // double detection_threshold_db = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_threshold_db = this->_internal_detection_threshold_db();
  uint64_t raw_detection_threshold_db;
  memcpy(&raw_detection_threshold_db, &tmp_detection_threshold_db, sizeof(tmp_detection_threshold_db));
  if (raw_detection_threshold_db != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_detection_threshold_db(), target);
  }

  // double false_alarm_rate = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = this->_internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_false_alarm_rate(), target);
  }

  // uint32 range_gates = 4;
  if (this->_internal_range_gates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_range_gates(), target);
  }

  // uint32 doppler_bins = 5;
  if (this->_internal_doppler_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_doppler_bins(), target);
  }

  // double range_resolution_m = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_resolution_m = this->_internal_range_resolution_m();
  uint64_t raw_range_resolution_m;
  memcpy(&raw_range_resolution_m, &tmp_range_resolution_m, sizeof(tmp_range_resolution_m));
  if (raw_range_resolution_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_range_resolution_m(), target);
  }

  // double doppler_resolution_hz = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler_resolution_hz = this->_internal_doppler_resolution_hz();
  uint64_t raw_doppler_resolution_hz;
  memcpy(&raw_doppler_resolution_hz, &tmp_doppler_resolution_hz, sizeof(tmp_doppler_resolution_hz));
  if (raw_doppler_resolution_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_doppler_resolution_hz(), target);
  }

  // bool enable_cfar = 8;
  if (this->_internal_enable_cfar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_cfar(), target);
  }

  // uint32 cfar_guard_cells = 9;
  if (this->_internal_cfar_guard_cells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cfar_guard_cells(), target);
  }

  // uint32 cfar_reference_cells = 10;
  if (this->_internal_cfar_reference_cells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cfar_reference_cells(), target);
  }

  // bool output_raw_detections = 11;
  if (this->_internal_output_raw_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_output_raw_detections(), target);
  }

  // bool output_clustered_detections = 12;
  if (this->_internal_output_clustered_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_output_clustered_detections(), target);
  }

  // double max_output_rate_hz = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_output_rate_hz = this->_internal_max_output_rate_hz();
  uint64_t raw_max_output_rate_hz;
  memcpy(&raw_max_output_rate_hz, &tmp_max_output_rate_hz, sizeof(tmp_max_output_rate_hz));
  if (raw_max_output_rate_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_output_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.SignalProcessingConfig)
  return target;
}

size_t SignalProcessingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.SignalProcessingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double detection_threshold_db = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_threshold_db = this->_internal_detection_threshold_db();
  uint64_t raw_detection_threshold_db;
  memcpy(&raw_detection_threshold_db, &tmp_detection_threshold_db, sizeof(tmp_detection_threshold_db));
  if (raw_detection_threshold_db != 0) {
    total_size += 1 + 8;
  }

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 range_gates = 4;
  if (this->_internal_range_gates() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_gates());
  }

  // double false_alarm_rate = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = this->_internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    total_size += 1 + 8;
  }

  // double range_resolution_m = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_resolution_m = this->_internal_range_resolution_m();
  uint64_t raw_range_resolution_m;
  memcpy(&raw_range_resolution_m, &tmp_range_resolution_m, sizeof(tmp_range_resolution_m));
  if (raw_range_resolution_m != 0) {
    total_size += 1 + 8;
  }

  // double doppler_resolution_hz = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler_resolution_hz = this->_internal_doppler_resolution_hz();
  uint64_t raw_doppler_resolution_hz;
  memcpy(&raw_doppler_resolution_hz, &tmp_doppler_resolution_hz, sizeof(tmp_doppler_resolution_hz));
  if (raw_doppler_resolution_hz != 0) {
    total_size += 1 + 8;
  }

  // uint32 doppler_bins = 5;
  if (this->_internal_doppler_bins() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_doppler_bins());
  }

  // uint32 cfar_guard_cells = 9;
  if (this->_internal_cfar_guard_cells() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cfar_guard_cells());
  }

  // uint32 cfar_reference_cells = 10;
  if (this->_internal_cfar_reference_cells() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cfar_reference_cells());
  }

  // bool enable_cfar = 8;
  if (this->_internal_enable_cfar() != 0) {
    total_size += 1 + 1;
  }

  // bool output_raw_detections = 11;
  if (this->_internal_output_raw_detections() != 0) {
    total_size += 1 + 1;
  }

  // bool output_clustered_detections = 12;
  if (this->_internal_output_clustered_detections() != 0) {
    total_size += 1 + 1;
  }

  // double max_output_rate_hz = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_output_rate_hz = this->_internal_max_output_rate_hz();
  uint64_t raw_max_output_rate_hz;
  memcpy(&raw_max_output_rate_hz, &tmp_max_output_rate_hz, sizeof(tmp_max_output_rate_hz));
  if (raw_max_output_rate_hz != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalProcessingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalProcessingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalProcessingConfig::GetClassData() const { return &_class_data_; }


void SignalProcessingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalProcessingConfig*>(&to_msg);
  auto& from = static_cast<const SignalProcessingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.SignalProcessingConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_threshold_db = from._internal_detection_threshold_db();
  uint64_t raw_detection_threshold_db;
  memcpy(&raw_detection_threshold_db, &tmp_detection_threshold_db, sizeof(tmp_detection_threshold_db));
  if (raw_detection_threshold_db != 0) {
    _this->_internal_set_detection_threshold_db(from._internal_detection_threshold_db());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_range_gates() != 0) {
    _this->_internal_set_range_gates(from._internal_range_gates());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = from._internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    _this->_internal_set_false_alarm_rate(from._internal_false_alarm_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_range_resolution_m = from._internal_range_resolution_m();
  uint64_t raw_range_resolution_m;
  memcpy(&raw_range_resolution_m, &tmp_range_resolution_m, sizeof(tmp_range_resolution_m));
  if (raw_range_resolution_m != 0) {
    _this->_internal_set_range_resolution_m(from._internal_range_resolution_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_doppler_resolution_hz = from._internal_doppler_resolution_hz();
  uint64_t raw_doppler_resolution_hz;
  memcpy(&raw_doppler_resolution_hz, &tmp_doppler_resolution_hz, sizeof(tmp_doppler_resolution_hz));
  if (raw_doppler_resolution_hz != 0) {
    _this->_internal_set_doppler_resolution_hz(from._internal_doppler_resolution_hz());
  }
  if (from._internal_doppler_bins() != 0) {
    _this->_internal_set_doppler_bins(from._internal_doppler_bins());
  }
  if (from._internal_cfar_guard_cells() != 0) {
    _this->_internal_set_cfar_guard_cells(from._internal_cfar_guard_cells());
  }
  if (from._internal_cfar_reference_cells() != 0) {
    _this->_internal_set_cfar_reference_cells(from._internal_cfar_reference_cells());
  }
  if (from._internal_enable_cfar() != 0) {
    _this->_internal_set_enable_cfar(from._internal_enable_cfar());
  }
  if (from._internal_output_raw_detections() != 0) {
    _this->_internal_set_output_raw_detections(from._internal_output_raw_detections());
  }
  if (from._internal_output_clustered_detections() != 0) {
    _this->_internal_set_output_clustered_detections(from._internal_output_clustered_detections());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_output_rate_hz = from._internal_max_output_rate_hz();
  uint64_t raw_max_output_rate_hz;
  memcpy(&raw_max_output_rate_hz, &tmp_max_output_rate_hz, sizeof(tmp_max_output_rate_hz));
  if (raw_max_output_rate_hz != 0) {
    _this->_internal_set_max_output_rate_hz(from._internal_max_output_rate_hz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalProcessingConfig::CopyFrom(const SignalProcessingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.SignalProcessingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalProcessingConfig::IsInitialized() const {
  return true;
}

void SignalProcessingConfig::InternalSwap(SignalProcessingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalProcessingConfig, _impl_.max_output_rate_hz_)
      + sizeof(SignalProcessingConfig::_impl_.max_output_rate_hz_)
      - PROTOBUF_FIELD_OFFSET(SignalProcessingConfig, _impl_.detection_threshold_db_)>(
          reinterpret_cast<char*>(&_impl_.detection_threshold_db_),
          reinterpret_cast<char*>(&other->_impl_.detection_threshold_db_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalProcessingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[7]);
}

// ===================================================================

RadarCommand_ParametersEntry_DoNotUse::RadarCommand_ParametersEntry_DoNotUse() {}
RadarCommand_ParametersEntry_DoNotUse::RadarCommand_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RadarCommand_ParametersEntry_DoNotUse::MergeFrom(const RadarCommand_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RadarCommand_ParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[8]);
}

// ===================================================================

class RadarCommand::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RadarCommand* msg);
  static const ::radar::messages::SignalProcessingConfig& config_update(const RadarCommand* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadarCommand::_Internal::timestamp(const RadarCommand* msg) {
  return *msg->_impl_.timestamp_;
}
const ::radar::messages::SignalProcessingConfig&
RadarCommand::_Internal::config_update(const RadarCommand* msg) {
  return *msg->_impl_.config_update_;
}
void RadarCommand::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
RadarCommand::RadarCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RadarCommand::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:radar.messages.RadarCommand)
}
RadarCommand::RadarCommand(const RadarCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{}
    , decltype(_impl_.target_mode_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.config_update_){nullptr}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.command_id_){}
    , decltype(_impl_.beam_azimuth_){}
    , decltype(_impl_.beam_elevation_){}
    , decltype(_impl_.beam_duration_ms_){}
    , decltype(_impl_.command_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _impl_.target_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_mode().empty()) {
    _this->_impl_.target_mode_.Set(from._internal_target_mode(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_config_update()) {
    _this->_impl_.config_update_ = new ::radar::messages::SignalProcessingConfig(*from._impl_.config_update_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.command_type_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.command_type_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.RadarCommand)
}

inline void RadarCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.target_mode_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.config_update_){nullptr}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.command_id_){0u}
    , decltype(_impl_.beam_azimuth_){0}
    , decltype(_impl_.beam_elevation_){0}
    , decltype(_impl_.beam_duration_ms_){0}
    , decltype(_impl_.command_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadarCommand::~RadarCommand() {
  // @@protoc_insertion_point(destructor:radar.messages.RadarCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RadarCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.Destruct();
  _impl_.parameters_.~MapField();
  _impl_.target_mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.config_update_;
}

void RadarCommand::ArenaDtor(void* object) {
  RadarCommand* _this = reinterpret_cast< RadarCommand* >(object);
  _this->_impl_.parameters_.Destruct();
}
void RadarCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.RadarCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.target_mode_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_update_ != nullptr) {
    delete _impl_.config_update_;
  }
  _impl_.config_update_ = nullptr;
  ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.command_type_) -
      reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.command_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 command_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.RadarCommand.CommandType command_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command_type(static_cast<::radar::messages::RadarCommand_CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // string target_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_target_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "radar.messages.RadarCommand.target_mode"));
        } else
          goto handle_unusual;
        continue;
      // double beam_azimuth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.beam_azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double beam_elevation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.beam_elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double beam_duration_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.beam_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.SignalProcessingConfig config_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_config_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> parameters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.RadarCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // uint32 command_id = 3;
  if (this->_internal_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_command_id(), target);
  }

  // .radar.messages.RadarCommand.CommandType command_type = 4;
  if (this->_internal_command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command_type(), target);
  }

  // string target_mode = 5;
  if (!this->_internal_target_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_mode().data(), static_cast<int>(this->_internal_target_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.RadarCommand.target_mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_target_mode(), target);
  }

  // double beam_azimuth = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_azimuth = this->_internal_beam_azimuth();
  uint64_t raw_beam_azimuth;
  memcpy(&raw_beam_azimuth, &tmp_beam_azimuth, sizeof(tmp_beam_azimuth));
  if (raw_beam_azimuth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_beam_azimuth(), target);
  }

  // double beam_elevation = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_elevation = this->_internal_beam_elevation();
  uint64_t raw_beam_elevation;
  memcpy(&raw_beam_elevation, &tmp_beam_elevation, sizeof(tmp_beam_elevation));
  if (raw_beam_elevation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_beam_elevation(), target);
  }

  // double beam_duration_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_duration_ms = this->_internal_beam_duration_ms();
  uint64_t raw_beam_duration_ms;
  memcpy(&raw_beam_duration_ms, &tmp_beam_duration_ms, sizeof(tmp_beam_duration_ms));
  if (raw_beam_duration_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_beam_duration_ms(), target);
  }

  // .radar.messages.SignalProcessingConfig config_update = 9;
  if (this->_internal_has_config_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::config_update(this),
        _Internal::config_update(this).GetCachedSize(), target, stream);
  }

  // map<string, string> parameters = 10;
  if (!this->_internal_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RadarCommand_ParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.RadarCommand.ParametersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.RadarCommand.ParametersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.RadarCommand)
  return target;
}

size_t RadarCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.RadarCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += RadarCommand_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string target_mode = 5;
  if (!this->_internal_target_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_mode());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .radar.messages.SignalProcessingConfig config_update = 9;
  if (this->_internal_has_config_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_update_);
  }

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 command_id = 3;
  if (this->_internal_command_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_id());
  }

  // double beam_azimuth = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_azimuth = this->_internal_beam_azimuth();
  uint64_t raw_beam_azimuth;
  memcpy(&raw_beam_azimuth, &tmp_beam_azimuth, sizeof(tmp_beam_azimuth));
  if (raw_beam_azimuth != 0) {
    total_size += 1 + 8;
  }

  // double beam_elevation = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_elevation = this->_internal_beam_elevation();
  uint64_t raw_beam_elevation;
  memcpy(&raw_beam_elevation, &tmp_beam_elevation, sizeof(tmp_beam_elevation));
  if (raw_beam_elevation != 0) {
    total_size += 1 + 8;
  }

  // double beam_duration_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_duration_ms = this->_internal_beam_duration_ms();
  uint64_t raw_beam_duration_ms;
  memcpy(&raw_beam_duration_ms, &tmp_beam_duration_ms, sizeof(tmp_beam_duration_ms));
  if (raw_beam_duration_ms != 0) {
    total_size += 1 + 8;
  }

  // .radar.messages.RadarCommand.CommandType command_type = 4;
  if (this->_internal_command_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarCommand::GetClassData() const { return &_class_data_; }


void RadarCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarCommand*>(&to_msg);
  auto& from = static_cast<const RadarCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.RadarCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_target_mode().empty()) {
    _this->_internal_set_target_mode(from._internal_target_mode());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_config_update()) {
    _this->_internal_mutable_config_update()->::radar::messages::SignalProcessingConfig::MergeFrom(
        from._internal_config_update());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_command_id() != 0) {
    _this->_internal_set_command_id(from._internal_command_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_azimuth = from._internal_beam_azimuth();
  uint64_t raw_beam_azimuth;
  memcpy(&raw_beam_azimuth, &tmp_beam_azimuth, sizeof(tmp_beam_azimuth));
  if (raw_beam_azimuth != 0) {
    _this->_internal_set_beam_azimuth(from._internal_beam_azimuth());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_elevation = from._internal_beam_elevation();
  uint64_t raw_beam_elevation;
  memcpy(&raw_beam_elevation, &tmp_beam_elevation, sizeof(tmp_beam_elevation));
  if (raw_beam_elevation != 0) {
    _this->_internal_set_beam_elevation(from._internal_beam_elevation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_beam_duration_ms = from._internal_beam_duration_ms();
  uint64_t raw_beam_duration_ms;
  memcpy(&raw_beam_duration_ms, &tmp_beam_duration_ms, sizeof(tmp_beam_duration_ms));
  if (raw_beam_duration_ms != 0) {
    _this->_internal_set_beam_duration_ms(from._internal_beam_duration_ms());
  }
  if (from._internal_command_type() != 0) {
    _this->_internal_set_command_type(from._internal_command_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarCommand::CopyFrom(const RadarCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.RadarCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarCommand::IsInitialized() const {
  return true;
}

void RadarCommand::InternalSwap(RadarCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_mode_, lhs_arena,
      &other->_impl_.target_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarCommand, _impl_.command_type_)
      + sizeof(RadarCommand::_impl_.command_type_)
      - PROTOBUF_FIELD_OFFSET(RadarCommand, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[9]);
}

// ===================================================================

RadarCommandResponse_ResultDataEntry_DoNotUse::RadarCommandResponse_ResultDataEntry_DoNotUse() {}
RadarCommandResponse_ResultDataEntry_DoNotUse::RadarCommandResponse_ResultDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RadarCommandResponse_ResultDataEntry_DoNotUse::MergeFrom(const RadarCommandResponse_ResultDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RadarCommandResponse_ResultDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[10]);
}

// ===================================================================

class RadarCommandResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RadarCommandResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadarCommandResponse::_Internal::timestamp(const RadarCommandResponse* msg) {
  return *msg->_impl_.timestamp_;
}
void RadarCommandResponse::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
RadarCommandResponse::RadarCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RadarCommandResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:radar.messages.RadarCommandResponse)
}
RadarCommandResponse::RadarCommandResponse(const RadarCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarCommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.result_data_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.command_id_){}
    , decltype(_impl_.execution_time_ms_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_data_.MergeFrom(from._impl_.result_data_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.sensor_id_, &from._impl_.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.RadarCommandResponse)
}

inline void RadarCommandResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.result_data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.command_id_){0u}
    , decltype(_impl_.execution_time_ms_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RadarCommandResponse::~RadarCommandResponse() {
  // @@protoc_insertion_point(destructor:radar.messages.RadarCommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RadarCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_data_.Destruct();
  _impl_.result_data_.~MapField();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void RadarCommandResponse::ArenaDtor(void* object) {
  RadarCommandResponse* _this = reinterpret_cast< RadarCommandResponse* >(object);
  _this->_impl_.result_data_.Destruct();
}
void RadarCommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.RadarCommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_data_.Clear();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.sensor_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarCommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.RadarCommandResponse.ResponseStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::radar::messages::RadarCommandResponse_ResponseStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "radar.messages.RadarCommandResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // double execution_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.execution_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> result_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.result_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarCommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.RadarCommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // uint32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_command_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.RadarCommandResponse.ResponseStatus status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.RadarCommandResponse.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // double execution_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time_ms = this->_internal_execution_time_ms();
  uint64_t raw_execution_time_ms;
  memcpy(&raw_execution_time_ms, &tmp_execution_time_ms, sizeof(tmp_execution_time_ms));
  if (raw_execution_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_execution_time_ms(), target);
  }

  // map<string, string> result_data = 7;
  if (!this->_internal_result_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RadarCommandResponse_ResultDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_result_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.RadarCommandResponse.ResultDataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.RadarCommandResponse.ResultDataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.RadarCommandResponse)
  return target;
}

size_t RadarCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.RadarCommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> result_data = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_result_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_result_data().begin();
      it != this->_internal_result_data().end(); ++it) {
    total_size += RadarCommandResponse_ResultDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // uint32 sensor_id = 1;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_id());
  }

  // double execution_time_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time_ms = this->_internal_execution_time_ms();
  uint64_t raw_execution_time_ms;
  memcpy(&raw_execution_time_ms, &tmp_execution_time_ms, sizeof(tmp_execution_time_ms));
  if (raw_execution_time_ms != 0) {
    total_size += 1 + 8;
  }

  // .radar.messages.RadarCommandResponse.ResponseStatus status = 4;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarCommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarCommandResponse::GetClassData() const { return &_class_data_; }


void RadarCommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarCommandResponse*>(&to_msg);
  auto& from = static_cast<const RadarCommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.RadarCommandResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_data_.MergeFrom(from._impl_.result_data_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_command_id() != 0) {
    _this->_internal_set_command_id(from._internal_command_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_execution_time_ms = from._internal_execution_time_ms();
  uint64_t raw_execution_time_ms;
  memcpy(&raw_execution_time_ms, &tmp_execution_time_ms, sizeof(tmp_execution_time_ms));
  if (raw_execution_time_ms != 0) {
    _this->_internal_set_execution_time_ms(from._internal_execution_time_ms());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarCommandResponse::CopyFrom(const RadarCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.RadarCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarCommandResponse::IsInitialized() const {
  return true;
}

void RadarCommandResponse::InternalSwap(RadarCommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_data_.InternalSwap(&other->_impl_.result_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarCommandResponse, _impl_.status_)
      + sizeof(RadarCommandResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RadarCommandResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[11]);
}

// ===================================================================

class PerformanceMetrics::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PerformanceMetrics* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PerformanceMetrics::_Internal::timestamp(const PerformanceMetrics* msg) {
  return *msg->_impl_.timestamp_;
}
void PerformanceMetrics::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
PerformanceMetrics::PerformanceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:radar.messages.PerformanceMetrics)
}
PerformanceMetrics::PerformanceMetrics(const PerformanceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerformanceMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.processing_time_ms_){}
    , decltype(_impl_.detection_rate_){}
    , decltype(_impl_.sensor_id_){}
    , decltype(_impl_.active_tracks_){}
    , decltype(_impl_.false_alarm_rate_){}
    , decltype(_impl_.cpu_usage_){}
    , decltype(_impl_.memory_usage_mb_){}
    , decltype(_impl_.input_latency_ms_){}
    , decltype(_impl_.processing_latency_ms_){}
    , decltype(_impl_.output_latency_ms_){}
    , decltype(_impl_.total_latency_ms_){}
    , decltype(_impl_.total_detections_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.processing_time_ms_, &from._impl_.processing_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_detections_) -
    reinterpret_cast<char*>(&_impl_.processing_time_ms_)) + sizeof(_impl_.total_detections_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.PerformanceMetrics)
}

inline void PerformanceMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.processing_time_ms_){0}
    , decltype(_impl_.detection_rate_){0}
    , decltype(_impl_.sensor_id_){0u}
    , decltype(_impl_.active_tracks_){0u}
    , decltype(_impl_.false_alarm_rate_){0}
    , decltype(_impl_.cpu_usage_){0}
    , decltype(_impl_.memory_usage_mb_){0}
    , decltype(_impl_.input_latency_ms_){0}
    , decltype(_impl_.processing_latency_ms_){0}
    , decltype(_impl_.output_latency_ms_){0}
    , decltype(_impl_.total_latency_ms_){0}
    , decltype(_impl_.total_detections_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PerformanceMetrics::~PerformanceMetrics() {
  // @@protoc_insertion_point(destructor:radar.messages.PerformanceMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformanceMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void PerformanceMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerformanceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.PerformanceMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.processing_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_detections_) -
      reinterpret_cast<char*>(&_impl_.processing_time_ms_)) + sizeof(_impl_.total_detections_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformanceMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double processing_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double detection_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.detection_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double false_alarm_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.false_alarm_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_tracks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.active_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_detections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double memory_usage_mb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.memory_usage_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double input_latency_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.input_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double processing_latency_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.processing_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double output_latency_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.output_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_latency_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.total_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformanceMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.PerformanceMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // uint32 sensor_id = 2;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sensor_id(), target);
  }

  // double processing_time_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_processing_time_ms(), target);
  }

  // double detection_rate = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_rate = this->_internal_detection_rate();
  uint64_t raw_detection_rate;
  memcpy(&raw_detection_rate, &tmp_detection_rate, sizeof(tmp_detection_rate));
  if (raw_detection_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_detection_rate(), target);
  }

  // double false_alarm_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = this->_internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_false_alarm_rate(), target);
  }

  // uint32 active_tracks = 6;
  if (this->_internal_active_tracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_active_tracks(), target);
  }

  // uint32 total_detections = 7;
  if (this->_internal_total_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_total_detections(), target);
  }

  // double cpu_usage = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_cpu_usage(), target);
  }

  // double memory_usage_mb = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_memory_usage_mb(), target);
  }

  // double input_latency_ms = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_latency_ms = this->_internal_input_latency_ms();
  uint64_t raw_input_latency_ms;
  memcpy(&raw_input_latency_ms, &tmp_input_latency_ms, sizeof(tmp_input_latency_ms));
  if (raw_input_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_input_latency_ms(), target);
  }

  // double processing_latency_ms = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_latency_ms = this->_internal_processing_latency_ms();
  uint64_t raw_processing_latency_ms;
  memcpy(&raw_processing_latency_ms, &tmp_processing_latency_ms, sizeof(tmp_processing_latency_ms));
  if (raw_processing_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_processing_latency_ms(), target);
  }

  // double output_latency_ms = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_output_latency_ms = this->_internal_output_latency_ms();
  uint64_t raw_output_latency_ms;
  memcpy(&raw_output_latency_ms, &tmp_output_latency_ms, sizeof(tmp_output_latency_ms));
  if (raw_output_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_output_latency_ms(), target);
  }

  // double total_latency_ms = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_latency_ms = this->_internal_total_latency_ms();
  uint64_t raw_total_latency_ms;
  memcpy(&raw_total_latency_ms, &tmp_total_latency_ms, sizeof(tmp_total_latency_ms));
  if (raw_total_latency_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_total_latency_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.PerformanceMetrics)
  return target;
}

size_t PerformanceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.PerformanceMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // double processing_time_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = this->_internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    total_size += 1 + 8;
  }

  // double detection_rate = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_rate = this->_internal_detection_rate();
  uint64_t raw_detection_rate;
  memcpy(&raw_detection_rate, &tmp_detection_rate, sizeof(tmp_detection_rate));
  if (raw_detection_rate != 0) {
    total_size += 1 + 8;
  }

  // uint32 sensor_id = 2;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sensor_id());
  }

  // uint32 active_tracks = 6;
  if (this->_internal_active_tracks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_tracks());
  }

  // double false_alarm_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = this->_internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    total_size += 1 + 8;
  }

  // double cpu_usage = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 8;
  }

  // double memory_usage_mb = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = this->_internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    total_size += 1 + 8;
  }

  // double input_latency_ms = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_latency_ms = this->_internal_input_latency_ms();
  uint64_t raw_input_latency_ms;
  memcpy(&raw_input_latency_ms, &tmp_input_latency_ms, sizeof(tmp_input_latency_ms));
  if (raw_input_latency_ms != 0) {
    total_size += 1 + 8;
  }

  // double processing_latency_ms = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_latency_ms = this->_internal_processing_latency_ms();
  uint64_t raw_processing_latency_ms;
  memcpy(&raw_processing_latency_ms, &tmp_processing_latency_ms, sizeof(tmp_processing_latency_ms));
  if (raw_processing_latency_ms != 0) {
    total_size += 1 + 8;
  }

  // double output_latency_ms = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_output_latency_ms = this->_internal_output_latency_ms();
  uint64_t raw_output_latency_ms;
  memcpy(&raw_output_latency_ms, &tmp_output_latency_ms, sizeof(tmp_output_latency_ms));
  if (raw_output_latency_ms != 0) {
    total_size += 1 + 8;
  }

  // double total_latency_ms = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_latency_ms = this->_internal_total_latency_ms();
  uint64_t raw_total_latency_ms;
  memcpy(&raw_total_latency_ms, &tmp_total_latency_ms, sizeof(tmp_total_latency_ms));
  if (raw_total_latency_ms != 0) {
    total_size += 1 + 8;
  }

  // uint32 total_detections = 7;
  if (this->_internal_total_detections() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_detections());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformanceMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerformanceMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformanceMetrics::GetClassData() const { return &_class_data_; }


void PerformanceMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerformanceMetrics*>(&to_msg);
  auto& from = static_cast<const PerformanceMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.PerformanceMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_time_ms = from._internal_processing_time_ms();
  uint64_t raw_processing_time_ms;
  memcpy(&raw_processing_time_ms, &tmp_processing_time_ms, sizeof(tmp_processing_time_ms));
  if (raw_processing_time_ms != 0) {
    _this->_internal_set_processing_time_ms(from._internal_processing_time_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_detection_rate = from._internal_detection_rate();
  uint64_t raw_detection_rate;
  memcpy(&raw_detection_rate, &tmp_detection_rate, sizeof(tmp_detection_rate));
  if (raw_detection_rate != 0) {
    _this->_internal_set_detection_rate(from._internal_detection_rate());
  }
  if (from._internal_sensor_id() != 0) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  if (from._internal_active_tracks() != 0) {
    _this->_internal_set_active_tracks(from._internal_active_tracks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_false_alarm_rate = from._internal_false_alarm_rate();
  uint64_t raw_false_alarm_rate;
  memcpy(&raw_false_alarm_rate, &tmp_false_alarm_rate, sizeof(tmp_false_alarm_rate));
  if (raw_false_alarm_rate != 0) {
    _this->_internal_set_false_alarm_rate(from._internal_false_alarm_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_mb = from._internal_memory_usage_mb();
  uint64_t raw_memory_usage_mb;
  memcpy(&raw_memory_usage_mb, &tmp_memory_usage_mb, sizeof(tmp_memory_usage_mb));
  if (raw_memory_usage_mb != 0) {
    _this->_internal_set_memory_usage_mb(from._internal_memory_usage_mb());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_latency_ms = from._internal_input_latency_ms();
  uint64_t raw_input_latency_ms;
  memcpy(&raw_input_latency_ms, &tmp_input_latency_ms, sizeof(tmp_input_latency_ms));
  if (raw_input_latency_ms != 0) {
    _this->_internal_set_input_latency_ms(from._internal_input_latency_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_processing_latency_ms = from._internal_processing_latency_ms();
  uint64_t raw_processing_latency_ms;
  memcpy(&raw_processing_latency_ms, &tmp_processing_latency_ms, sizeof(tmp_processing_latency_ms));
  if (raw_processing_latency_ms != 0) {
    _this->_internal_set_processing_latency_ms(from._internal_processing_latency_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_output_latency_ms = from._internal_output_latency_ms();
  uint64_t raw_output_latency_ms;
  memcpy(&raw_output_latency_ms, &tmp_output_latency_ms, sizeof(tmp_output_latency_ms));
  if (raw_output_latency_ms != 0) {
    _this->_internal_set_output_latency_ms(from._internal_output_latency_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_latency_ms = from._internal_total_latency_ms();
  uint64_t raw_total_latency_ms;
  memcpy(&raw_total_latency_ms, &tmp_total_latency_ms, sizeof(tmp_total_latency_ms));
  if (raw_total_latency_ms != 0) {
    _this->_internal_set_total_latency_ms(from._internal_total_latency_ms());
  }
  if (from._internal_total_detections() != 0) {
    _this->_internal_set_total_detections(from._internal_total_detections());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformanceMetrics::CopyFrom(const PerformanceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.PerformanceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceMetrics::IsInitialized() const {
  return true;
}

void PerformanceMetrics::InternalSwap(PerformanceMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformanceMetrics, _impl_.total_detections_)
      + sizeof(PerformanceMetrics::_impl_.total_detections_)
      - PROTOBUF_FIELD_OFFSET(PerformanceMetrics, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformanceMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[12]);
}

// ===================================================================

SystemHealth_ComponentHealthEntry_DoNotUse::SystemHealth_ComponentHealthEntry_DoNotUse() {}
SystemHealth_ComponentHealthEntry_DoNotUse::SystemHealth_ComponentHealthEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemHealth_ComponentHealthEntry_DoNotUse::MergeFrom(const SystemHealth_ComponentHealthEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemHealth_ComponentHealthEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[13]);
}

// ===================================================================

class SystemHealth::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const SystemHealth* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemHealth::_Internal::timestamp(const SystemHealth* msg) {
  return *msg->_impl_.timestamp_;
}
void SystemHealth::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
SystemHealth::SystemHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SystemHealth::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:radar.messages.SystemHealth)
}
SystemHealth::SystemHealth(const SystemHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemHealth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.component_health_)*/{}
    , decltype(_impl_.recent_errors_){from._impl_.recent_errors_}
    , decltype(_impl_.recent_warnings_){from._impl_.recent_warnings_}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.cpu_usage_percent_){}
    , decltype(_impl_.memory_usage_percent_){}
    , decltype(_impl_.overall_status_){}
    , decltype(_impl_.error_count_last_hour_){}
    , decltype(_impl_.disk_usage_percent_){}
    , decltype(_impl_.network_usage_mbps_){}
    , decltype(_impl_.warning_count_last_hour_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.component_health_.MergeFrom(from._impl_.component_health_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.cpu_usage_percent_, &from._impl_.cpu_usage_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.warning_count_last_hour_) -
    reinterpret_cast<char*>(&_impl_.cpu_usage_percent_)) + sizeof(_impl_.warning_count_last_hour_));
  // @@protoc_insertion_point(copy_constructor:radar.messages.SystemHealth)
}

inline void SystemHealth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.component_health_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.recent_errors_){arena}
    , decltype(_impl_.recent_warnings_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.cpu_usage_percent_){0}
    , decltype(_impl_.memory_usage_percent_){0}
    , decltype(_impl_.overall_status_){0}
    , decltype(_impl_.error_count_last_hour_){0u}
    , decltype(_impl_.disk_usage_percent_){0}
    , decltype(_impl_.network_usage_mbps_){0}
    , decltype(_impl_.warning_count_last_hour_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SystemHealth::~SystemHealth() {
  // @@protoc_insertion_point(destructor:radar.messages.SystemHealth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SystemHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_health_.Destruct();
  _impl_.component_health_.~MapField();
  _impl_.recent_errors_.~RepeatedPtrField();
  _impl_.recent_warnings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void SystemHealth::ArenaDtor(void* object) {
  SystemHealth* _this = reinterpret_cast< SystemHealth* >(object);
  _this->_impl_.component_health_.Destruct();
}
void SystemHealth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:radar.messages.SystemHealth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_health_.Clear();
  _impl_.recent_errors_.Clear();
  _impl_.recent_warnings_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  ::memset(&_impl_.cpu_usage_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.warning_count_last_hour_) -
      reinterpret_cast<char*>(&_impl_.cpu_usage_percent_)) + sizeof(_impl_.warning_count_last_hour_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemHealth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .radar.messages.SystemHealth.HealthStatus overall_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_overall_status(static_cast<::radar::messages::SystemHealth_HealthStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .radar.messages.SystemHealth.HealthStatus> component_health = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.component_health_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.cpu_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double memory_usage_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.memory_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double disk_usage_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.disk_usage_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double network_usage_mbps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.network_usage_mbps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 error_count_last_hour = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.error_count_last_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 warning_count_last_hour = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.warning_count_last_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string recent_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_recent_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "radar.messages.SystemHealth.recent_errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string recent_warnings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_recent_warnings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "radar.messages.SystemHealth.recent_warnings"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemHealth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:radar.messages.SystemHealth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .radar.messages.SystemHealth.HealthStatus overall_status = 2;
  if (this->_internal_overall_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_overall_status(), target);
  }

  // map<string, .radar.messages.SystemHealth.HealthStatus> component_health = 3;
  if (!this->_internal_component_health().empty()) {
    using MapType = ::_pb::Map<std::string, ::radar::messages::SystemHealth_HealthStatus>;
    using WireHelper = SystemHealth_ComponentHealthEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_component_health();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "radar.messages.SystemHealth.ComponentHealthEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // double cpu_usage_percent = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_cpu_usage_percent(), target);
  }

  // double memory_usage_percent = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = this->_internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_memory_usage_percent(), target);
  }

  // double disk_usage_percent = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = this->_internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_disk_usage_percent(), target);
  }

  // double network_usage_mbps = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_usage_mbps = this->_internal_network_usage_mbps();
  uint64_t raw_network_usage_mbps;
  memcpy(&raw_network_usage_mbps, &tmp_network_usage_mbps, sizeof(tmp_network_usage_mbps));
  if (raw_network_usage_mbps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_network_usage_mbps(), target);
  }

  // uint32 error_count_last_hour = 8;
  if (this->_internal_error_count_last_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_error_count_last_hour(), target);
  }

  // uint32 warning_count_last_hour = 9;
  if (this->_internal_warning_count_last_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_warning_count_last_hour(), target);
  }

  // repeated string recent_errors = 10;
  for (int i = 0, n = this->_internal_recent_errors_size(); i < n; i++) {
    const auto& s = this->_internal_recent_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.SystemHealth.recent_errors");
    target = stream->WriteString(10, s, target);
  }

  // repeated string recent_warnings = 11;
  for (int i = 0, n = this->_internal_recent_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_recent_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "radar.messages.SystemHealth.recent_warnings");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar.messages.SystemHealth)
  return target;
}

size_t SystemHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar.messages.SystemHealth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .radar.messages.SystemHealth.HealthStatus> component_health = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_component_health_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::radar::messages::SystemHealth_HealthStatus >::const_iterator
      it = this->_internal_component_health().begin();
      it != this->_internal_component_health().end(); ++it) {
    total_size += SystemHealth_ComponentHealthEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string recent_errors = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.recent_errors_.size());
  for (int i = 0, n = _impl_.recent_errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.recent_errors_.Get(i));
  }

  // repeated string recent_warnings = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.recent_warnings_.size());
  for (int i = 0, n = _impl_.recent_warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.recent_warnings_.Get(i));
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // double cpu_usage_percent = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = this->_internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    total_size += 1 + 8;
  }

  // double memory_usage_percent = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = this->_internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    total_size += 1 + 8;
  }

  // .radar.messages.SystemHealth.HealthStatus overall_status = 2;
  if (this->_internal_overall_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_overall_status());
  }

  // uint32 error_count_last_hour = 8;
  if (this->_internal_error_count_last_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_count_last_hour());
  }

  // double disk_usage_percent = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = this->_internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    total_size += 1 + 8;
  }

  // double network_usage_mbps = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_usage_mbps = this->_internal_network_usage_mbps();
  uint64_t raw_network_usage_mbps;
  memcpy(&raw_network_usage_mbps, &tmp_network_usage_mbps, sizeof(tmp_network_usage_mbps));
  if (raw_network_usage_mbps != 0) {
    total_size += 1 + 8;
  }

  // uint32 warning_count_last_hour = 9;
  if (this->_internal_warning_count_last_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_warning_count_last_hour());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemHealth::GetClassData() const { return &_class_data_; }


void SystemHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemHealth*>(&to_msg);
  auto& from = static_cast<const SystemHealth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:radar.messages.SystemHealth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_health_.MergeFrom(from._impl_.component_health_);
  _this->_impl_.recent_errors_.MergeFrom(from._impl_.recent_errors_);
  _this->_impl_.recent_warnings_.MergeFrom(from._impl_.recent_warnings_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage_percent = from._internal_cpu_usage_percent();
  uint64_t raw_cpu_usage_percent;
  memcpy(&raw_cpu_usage_percent, &tmp_cpu_usage_percent, sizeof(tmp_cpu_usage_percent));
  if (raw_cpu_usage_percent != 0) {
    _this->_internal_set_cpu_usage_percent(from._internal_cpu_usage_percent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage_percent = from._internal_memory_usage_percent();
  uint64_t raw_memory_usage_percent;
  memcpy(&raw_memory_usage_percent, &tmp_memory_usage_percent, sizeof(tmp_memory_usage_percent));
  if (raw_memory_usage_percent != 0) {
    _this->_internal_set_memory_usage_percent(from._internal_memory_usage_percent());
  }
  if (from._internal_overall_status() != 0) {
    _this->_internal_set_overall_status(from._internal_overall_status());
  }
  if (from._internal_error_count_last_hour() != 0) {
    _this->_internal_set_error_count_last_hour(from._internal_error_count_last_hour());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_usage_percent = from._internal_disk_usage_percent();
  uint64_t raw_disk_usage_percent;
  memcpy(&raw_disk_usage_percent, &tmp_disk_usage_percent, sizeof(tmp_disk_usage_percent));
  if (raw_disk_usage_percent != 0) {
    _this->_internal_set_disk_usage_percent(from._internal_disk_usage_percent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_usage_mbps = from._internal_network_usage_mbps();
  uint64_t raw_network_usage_mbps;
  memcpy(&raw_network_usage_mbps, &tmp_network_usage_mbps, sizeof(tmp_network_usage_mbps));
  if (raw_network_usage_mbps != 0) {
    _this->_internal_set_network_usage_mbps(from._internal_network_usage_mbps());
  }
  if (from._internal_warning_count_last_hour() != 0) {
    _this->_internal_set_warning_count_last_hour(from._internal_warning_count_last_hour());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemHealth::CopyFrom(const SystemHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar.messages.SystemHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemHealth::IsInitialized() const {
  return true;
}

void SystemHealth::InternalSwap(SystemHealth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.component_health_.InternalSwap(&other->_impl_.component_health_);
  _impl_.recent_errors_.InternalSwap(&other->_impl_.recent_errors_);
  _impl_.recent_warnings_.InternalSwap(&other->_impl_.recent_warnings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemHealth, _impl_.warning_count_last_hour_)
      + sizeof(SystemHealth::_impl_.warning_count_last_hour_)
      - PROTOBUF_FIELD_OFFSET(SystemHealth, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemHealth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_radar_5fmessages_2eproto_getter, &descriptor_table_radar_5fmessages_2eproto_once,
      file_level_metadata_radar_5fmessages_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace radar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::radar::messages::Point3D*
Arena::CreateMaybeMessage< ::radar::messages::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::Vector3D*
Arena::CreateMaybeMessage< ::radar::messages::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::Matrix3D*
Arena::CreateMaybeMessage< ::radar::messages::Matrix3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::Matrix3D >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::Detection_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::radar::messages::Detection_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::Detection_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::Detection*
Arena::CreateMaybeMessage< ::radar::messages::Detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::DetectionBatch*
Arena::CreateMaybeMessage< ::radar::messages::DetectionBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::DetectionBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::RadarStatus*
Arena::CreateMaybeMessage< ::radar::messages::RadarStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::RadarStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::SignalProcessingConfig*
Arena::CreateMaybeMessage< ::radar::messages::SignalProcessingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::SignalProcessingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::RadarCommand_ParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::radar::messages::RadarCommand_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::RadarCommand_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::RadarCommand*
Arena::CreateMaybeMessage< ::radar::messages::RadarCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::RadarCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::RadarCommandResponse_ResultDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::RadarCommandResponse*
Arena::CreateMaybeMessage< ::radar::messages::RadarCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::RadarCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::PerformanceMetrics*
Arena::CreateMaybeMessage< ::radar::messages::PerformanceMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::PerformanceMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse*
Arena::CreateMaybeMessage< ::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::SystemHealth_ComponentHealthEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::radar::messages::SystemHealth*
Arena::CreateMaybeMessage< ::radar::messages::SystemHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::radar::messages::SystemHealth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
